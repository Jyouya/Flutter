'use strict';
module.exports = (sequelize, DataTypes) => {
  const Like = sequelize.define('Like', {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true
    },
    weight: {
      type: DataTypes.FLOAT,
      defaultValue: 100 / Math.sqrt(Math.PI * 2 * (1000 * 60 * 60 * 6) ** 2),
    }
    // createdAt and updatedAt are auto-generated by sequelize.
  });

  {
    // Define constants for our formula
    const sixHours =  1000 * 60 * 60 * 6; // 6 hours
    const oneDay = 1000 * 60 * 60 * 24; // 24 hours

    const r = 2 * sixHours ** 2;
    const k = 100 / (Math.sqrt(Math.PI * r));
    const d = 1 / r;

    const final = k * Math.E ** (-1 * oneDay ** 2  * d);

    Like.prototype.weigh = function () {
      const age = new Date() - this.createdAt;
      let weight;
      if (age > oneDay) {
        weight = final;
      } else {
        const p = - age * age * d;
        weight = k * Math.E ** p;
      }
      return this.setDataValue('weight', weight);
      // this.weight = weight;
      // Store the weight back in the db
      // Likes don't know when their weight expires, that's on their post.
    }
  }




  Like.associate = function (models) {
    Like.belongsTo(models.User, {
      foreignKey: {
        allowNull: false
      },
    })
    Like.belongsTo(models.Post, {
      foreignKey: {
        allowNull: false
      }
    })
  };
  return Like;
};